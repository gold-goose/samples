# This is a basic workflow to help you get started with Actions
name: Snippets 5000

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    paths:
      - "**.cs"
      - "**.vb"
      - "**.fs"
      - "**.xaml"
      - "**.razor"
      - "**.cshtml"
      - "**.vbhtml"
      - "**.csproj"
      - "**.vbproj"
      - "**.fsproj"
      - "**.sln"
      - "**global.json"
      - "**snippets.5000.json"
    branches: [ master ]

env:
  DOTNET_INSTALLER_CHANNEL: 'release/5.0.1xx'
  DOTNET_DO_INSTALL: 'false'
  EnableNuGetPackageRestore: 'True'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675 #@v2

    # Get the latest preview SDK (or sdk not installed by the runner)
    - name: Setup .NET SDK 5
      if: ${{ env.DOTNET_DO_INSTALL == 'true' }}
      run: |
        echo "Downloading dotnet-install.ps1"
        Invoke-WebRequest https://raw.githubusercontent.com/dotnet/install-scripts/master/src/dotnet-install.ps1 -OutFile dotnet-install.ps1
        echo "Installing dotnet version ${{ env.DOTNET_INSTALLER_CHANNEL }}"
        .\dotnet-install.ps1 -InstallDir "c:\program files\dotnet" -Channel "${{ env.DOTNET_INSTALLER_CHANNEL }}"
      
    # Install locate projs global tool
    - name: Install LocateProjects tool
      run: |
        dotnet tool install --global --add-source ./.github/workflows/dependencies/ DotnetDocsTools.LocateProjects
    
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@0dc37c7260df8e43e9d5a7d4455662fda84240b3 #@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main
    
    # Run locate projs tool
    - name: Locate projects for PR
      env:
        GitHubKey: ${{ secrets.GITHUB_TOKEN }}
        LocateExts: ".cs;.vb;.fs;.cpp;.h;.xaml;.razor;.cshtml;.vbhtml;.csproj;.fsproj;.vbproj;.sln"
      run: |
        ./.github/workflows/dependencies/Get-MSBuildResults.ps1 "${{ github.workspace }}" -PullRequest ${{ github.event.number }} -RepoOwner ${{ github.repository_owner }} -RepoName ${{ github.event.repository.name }}
        
    # Update build output json file
    - name: Upload build results
      uses: actions/upload-artifact@3446296876d12d4e3a0f3145a3c87e67bf0a16b5 #@v1
      with:
        name: build
        path: ./output.json

    # Return status based on json file
    - name: Report status
      run: |
        ./.github/workflows/dependencies/Out-GithubActionStatus.ps1
    
    # Run CodeQL analysis
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@0dc37c7260df8e43e9d5a7d4455662fda84240b3 #@v1
